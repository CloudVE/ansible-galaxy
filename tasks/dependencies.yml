---
# Manage Galaxy framework dependencies

- name: Manage dependencies
  block:

    - name: Include virtualenv setup tasks
      import_tasks: virtualenv.yml

    # virtualenv_command is still required if `virtualenv` isn't on $PATH, even if the venv already exists.
    - name: Install Galaxy base dependencies
      pip:
        requirements: "{{ galaxy_requirements_file }}"
        extra_args: "--index-url https://wheels.galaxyproject.org/simple/ --extra-index-url https://pypi.python.org/simple {{ pip_extra_args | default('') }}"
        virtualenv: "{{ galaxy_venv_dir }}"
        virtualenv_command: "{{ galaxy_virtualenv_command | default(pip_virtualenv_command | default(omit)) }}"
      environment:
        PYTHONPATH: null
        VIRTUAL_ENV: "{{ galaxy_venv_dir }}"

    # recompile uwsgi with libyaml when galaxy_uwsgi_yaml_parser == 'libyaml'
    # xref: https://github.com/galaxyproject/galaxy/issues/8558
    - name: Copy libyaml.ini file
      copy:
        src: "libyaml.ini"
        dest: "{{ galaxy_config_dir }}/libyaml.ini"
      when: galaxy_uwsgi_yaml_parser == "libyaml"

    - name: Get currently installed version of uwsgi
      shell: "{{ galaxy_venv_dir }}/bin/uwsgi --version"
      register: uwsgi_output
      when: galaxy_uwsgi_yaml_parser == "libyaml"

    - name: Install same version of uwsgi as in galaxy requirements, but with libyaml (libyaml-dev package required)
      pip:
        name: "uwsgi=={{ uwsgi_output.stdout }}"
        extra_args: "{{ pip_extra_args | default('') }}"
        virtualenv: "{{ galaxy_venv_dir }}"
        virtualenv_command: "{{ galaxy_virtualenv_command | default(pip_virtualenv_command | default(omit)) }}"
      environment:
        PYTHONPATH: null
        VIRTUAL_ENV: "{{ galaxy_venv_dir }}"
        UWSGI_PROFILE: "{{ galaxy_config_dir }}/libyaml.ini"
      when: galaxy_uwsgi_yaml_parser == "libyaml"

    - name: Remove libyaml.ini
      file:
        state: absent
        path: "{{ galaxy_config_dir }}/libyaml.ini"
      when: galaxy_uwsgi_yaml_parser == "libyaml"

    - name: Collect Galaxy conditional dependency requirement strings
      command: "{{ galaxy_venv_dir }}/bin/python -c \"import galaxy.dependencies; print('\\n'.join(galaxy.dependencies.optional('{{ galaxy_config_file }}')))\""
      environment:
        PYTHONPATH: "{{ galaxy_server_dir }}/lib"
      register: conditional_dependencies
      changed_when: no

    - name: Install Galaxy conditional dependencies
      pip:
        name: "{{ conditional_dependencies.stdout_lines }}"
        extra_args: "--index-url https://wheels.galaxyproject.org/simple/ --extra-index-url https://pypi.python.org/simple {{ pip_extra_args | default('') }}"
        virtualenv: "{{ galaxy_venv_dir }}"
        virtualenv_command: "{{ galaxy_virtualenv_command | default(pip_virtualenv_command | default(omit)) }}"
      environment:
        PYTHONPATH: null
        VIRTUAL_ENV: "{{ galaxy_venv_dir }}"
      when: (not ansible_check_mode) and conditional_dependencies.stdout_lines | length > 0

  remote_user: "{{ galaxy_remote_users.privsep | default(__galaxy_remote_user) }}"
  become: "{{ true if galaxy_become_users.privsep is defined else __galaxy_become }}"
  become_user: "{{ galaxy_become_users.privsep | default(__galaxy_become_user) }}"
